/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MTSearchApi_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




SearchQueryReq::~SearchQueryReq() throw() {
}


void SearchQueryReq::__set_key_words(const std::string& val) {
  this->key_words = val;
}

void SearchQueryReq::__set_city(const std::string& val) {
  this->city = val;
}

void SearchQueryReq::__set_category(const std::string& val) {
  this->category = val;
}

void SearchQueryReq::__set_cityid(const int32_t val) {
  this->cityid = val;
}

void SearchQueryReq::__set_id(const int32_t val) {
  this->id = val;
}

void SearchQueryReq::__set_offset(const int32_t val) {
  this->offset = val;
__isset.offset = true;
}

void SearchQueryReq::__set_limit(const int32_t val) {
  this->limit = val;
__isset.limit = true;
}

void SearchQueryReq::__set_location(const std::string& val) {
  this->location = val;
__isset.location = true;
}

void SearchQueryReq::__set_orderby(const std::string& val) {
  this->orderby = val;
__isset.orderby = true;
}

void SearchQueryReq::__set_filter(const std::map<std::string, std::string> & val) {
  this->filter = val;
__isset.filter = true;
}

void SearchQueryReq::__set_counter(const std::map<std::string, std::string> & val) {
  this->counter = val;
__isset.counter = true;
}

void SearchQueryReq::__set_control(const std::map<std::string, std::string> & val) {
  this->control = val;
__isset.control = true;
}

void SearchQueryReq::__set_exdata(const std::map<std::string, std::string> & val) {
  this->exdata = val;
__isset.exdata = true;
}

void SearchQueryReq::__set_opt(const int32_t val) {
  this->opt = val;
__isset.opt = true;
}

void swap(SearchQueryReq &a, SearchQueryReq &b) {
  using ::std::swap;
  swap(a.key_words, b.key_words);
  swap(a.city, b.city);
  swap(a.category, b.category);
  swap(a.cityid, b.cityid);
  swap(a.id, b.id);
  swap(a.offset, b.offset);
  swap(a.limit, b.limit);
  swap(a.location, b.location);
  swap(a.orderby, b.orderby);
  swap(a.filter, b.filter);
  swap(a.counter, b.counter);
  swap(a.control, b.control);
  swap(a.exdata, b.exdata);
  swap(a.opt, b.opt);
  swap(a.__isset, b.__isset);
}

SearchQueryReq::SearchQueryReq(const SearchQueryReq& other32) {
  key_words = other32.key_words;
  city = other32.city;
  category = other32.category;
  cityid = other32.cityid;
  id = other32.id;
  offset = other32.offset;
  limit = other32.limit;
  location = other32.location;
  orderby = other32.orderby;
  filter = other32.filter;
  counter = other32.counter;
  control = other32.control;
  exdata = other32.exdata;
  opt = other32.opt;
  __isset = other32.__isset;
}
SearchQueryReq::SearchQueryReq( SearchQueryReq&& other33) {
  key_words = std::move(other33.key_words);
  city = std::move(other33.city);
  category = std::move(other33.category);
  cityid = std::move(other33.cityid);
  id = std::move(other33.id);
  offset = std::move(other33.offset);
  limit = std::move(other33.limit);
  location = std::move(other33.location);
  orderby = std::move(other33.orderby);
  filter = std::move(other33.filter);
  counter = std::move(other33.counter);
  control = std::move(other33.control);
  exdata = std::move(other33.exdata);
  opt = std::move(other33.opt);
  __isset = std::move(other33.__isset);
}
SearchQueryReq& SearchQueryReq::operator=(const SearchQueryReq& other34) {
  key_words = other34.key_words;
  city = other34.city;
  category = other34.category;
  cityid = other34.cityid;
  id = other34.id;
  offset = other34.offset;
  limit = other34.limit;
  location = other34.location;
  orderby = other34.orderby;
  filter = other34.filter;
  counter = other34.counter;
  control = other34.control;
  exdata = other34.exdata;
  opt = other34.opt;
  __isset = other34.__isset;
  return *this;
}
SearchQueryReq& SearchQueryReq::operator=(SearchQueryReq&& other35) {
  key_words = std::move(other35.key_words);
  city = std::move(other35.city);
  category = std::move(other35.category);
  cityid = std::move(other35.cityid);
  id = std::move(other35.id);
  offset = std::move(other35.offset);
  limit = std::move(other35.limit);
  location = std::move(other35.location);
  orderby = std::move(other35.orderby);
  filter = std::move(other35.filter);
  counter = std::move(other35.counter);
  control = std::move(other35.control);
  exdata = std::move(other35.exdata);
  opt = std::move(other35.opt);
  __isset = std::move(other35.__isset);
  return *this;
}
void SearchQueryReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchQueryReq(";
  out << "key_words=" << to_string(key_words);
  out << ", " << "city=" << to_string(city);
  out << ", " << "category=" << to_string(category);
  out << ", " << "cityid=" << to_string(cityid);
  out << ", " << "id=" << to_string(id);
  out << ", " << "offset="; (__isset.offset ? (out << to_string(offset)) : (out << "<null>"));
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ", " << "location="; (__isset.location ? (out << to_string(location)) : (out << "<null>"));
  out << ", " << "orderby="; (__isset.orderby ? (out << to_string(orderby)) : (out << "<null>"));
  out << ", " << "filter="; (__isset.filter ? (out << to_string(filter)) : (out << "<null>"));
  out << ", " << "counter="; (__isset.counter ? (out << to_string(counter)) : (out << "<null>"));
  out << ", " << "control="; (__isset.control ? (out << to_string(control)) : (out << "<null>"));
  out << ", " << "exdata="; (__isset.exdata ? (out << to_string(exdata)) : (out << "<null>"));
  out << ", " << "opt="; (__isset.opt ? (out << to_string(opt)) : (out << "<null>"));
  out << ")";
}


SearchMatchItem::~SearchMatchItem() throw() {
}


void SearchMatchItem::__set_id(const int32_t val) {
  this->id = val;
}

void SearchMatchItem::__set_doc_info(const std::map<std::string, std::string> & val) {
  this->doc_info = val;
}

void swap(SearchMatchItem &a, SearchMatchItem &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.doc_info, b.doc_info);
}

SearchMatchItem::SearchMatchItem(const SearchMatchItem& other44) {
  id = other44.id;
  doc_info = other44.doc_info;
}
SearchMatchItem::SearchMatchItem( SearchMatchItem&& other45) {
  id = std::move(other45.id);
  doc_info = std::move(other45.doc_info);
}
SearchMatchItem& SearchMatchItem::operator=(const SearchMatchItem& other46) {
  id = other46.id;
  doc_info = other46.doc_info;
  return *this;
}
SearchMatchItem& SearchMatchItem::operator=(SearchMatchItem&& other47) {
  id = std::move(other47.id);
  doc_info = std::move(other47.doc_info);
  return *this;
}
void SearchMatchItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchMatchItem(";
  out << "id=" << to_string(id);
  out << ", " << "doc_info=" << to_string(doc_info);
  out << ")";
}


SearchGroupRes::~SearchGroupRes() throw() {
}


void SearchGroupRes::__set_type(const std::string& val) {
  this->type = val;
}

void SearchGroupRes::__set_info(const std::string& val) {
  this->info = val;
}

void SearchGroupRes::__set_matches(const std::vector<SearchMatchItem> & val) {
  this->matches = val;
}

void SearchGroupRes::__set_exinfo(const std::map<std::string, std::string> & val) {
  this->exinfo = val;
}

void swap(SearchGroupRes &a, SearchGroupRes &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.info, b.info);
  swap(a.matches, b.matches);
  swap(a.exinfo, b.exinfo);
}

SearchGroupRes::SearchGroupRes(const SearchGroupRes& other62) {
  type = other62.type;
  info = other62.info;
  matches = other62.matches;
  exinfo = other62.exinfo;
}
SearchGroupRes::SearchGroupRes( SearchGroupRes&& other63) {
  type = std::move(other63.type);
  info = std::move(other63.info);
  matches = std::move(other63.matches);
  exinfo = std::move(other63.exinfo);
}
SearchGroupRes& SearchGroupRes::operator=(const SearchGroupRes& other64) {
  type = other64.type;
  info = other64.info;
  matches = other64.matches;
  exinfo = other64.exinfo;
  return *this;
}
SearchGroupRes& SearchGroupRes::operator=(SearchGroupRes&& other65) {
  type = std::move(other65.type);
  info = std::move(other65.info);
  matches = std::move(other65.matches);
  exinfo = std::move(other65.exinfo);
  return *this;
}
void SearchGroupRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchGroupRes(";
  out << "type=" << to_string(type);
  out << ", " << "info=" << to_string(info);
  out << ", " << "matches=" << to_string(matches);
  out << ", " << "exinfo=" << to_string(exinfo);
  out << ")";
}


SearchMultiRes::~SearchMultiRes() throw() {
}


void SearchMultiRes::__set_status(const int32_t val) {
  this->status = val;
}

void SearchMultiRes::__set_error(const std::string& val) {
  this->error = val;
}

void SearchMultiRes::__set_group_res(const std::vector<SearchGroupRes> & val) {
  this->group_res = val;
}

void SearchMultiRes::__set_exinfo(const std::map<std::string, std::string> & val) {
  this->exinfo = val;
}

void swap(SearchMultiRes &a, SearchMultiRes &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.error, b.error);
  swap(a.group_res, b.group_res);
  swap(a.exinfo, b.exinfo);
}

SearchMultiRes::SearchMultiRes(const SearchMultiRes& other80) {
  status = other80.status;
  error = other80.error;
  group_res = other80.group_res;
  exinfo = other80.exinfo;
}
SearchMultiRes::SearchMultiRes( SearchMultiRes&& other81) {
  status = std::move(other81.status);
  error = std::move(other81.error);
  group_res = std::move(other81.group_res);
  exinfo = std::move(other81.exinfo);
}
SearchMultiRes& SearchMultiRes::operator=(const SearchMultiRes& other82) {
  status = other82.status;
  error = other82.error;
  group_res = other82.group_res;
  exinfo = other82.exinfo;
  return *this;
}
SearchMultiRes& SearchMultiRes::operator=(SearchMultiRes&& other83) {
  status = std::move(other83.status);
  error = std::move(other83.error);
  group_res = std::move(other83.group_res);
  exinfo = std::move(other83.exinfo);
  return *this;
}
void SearchMultiRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchMultiRes(";
  out << "status=" << to_string(status);
  out << ", " << "error=" << to_string(error);
  out << ", " << "group_res=" << to_string(group_res);
  out << ", " << "exinfo=" << to_string(exinfo);
  out << ")";
}


