/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MTSearch_H
#define MTSearch_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "MTSearchApi_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MTSearchIf {
 public:
  virtual ~MTSearchIf() {}
  virtual void MTSearchDeal(SearchMultiRes& _return, const SearchQueryReq& query) = 0;
  virtual void MTSearchPoi(SearchMultiRes& _return, const SearchQueryReq& query) = 0;
  virtual void MTMultiSearch(SearchMultiRes& _return, const SearchQueryReq& query) = 0;
  virtual void AttributeFilter(SearchMultiRes& _return, const SearchQueryReq& query) = 0;
};

class MTSearchIfFactory {
 public:
  typedef MTSearchIf Handler;

  virtual ~MTSearchIfFactory() {}

  virtual MTSearchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MTSearchIf* /* handler */) = 0;
};

class MTSearchIfSingletonFactory : virtual public MTSearchIfFactory {
 public:
  MTSearchIfSingletonFactory(const boost::shared_ptr<MTSearchIf>& iface) : iface_(iface) {}
  virtual ~MTSearchIfSingletonFactory() {}

  virtual MTSearchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MTSearchIf* /* handler */) {}

 protected:
  boost::shared_ptr<MTSearchIf> iface_;
};

class MTSearchNull : virtual public MTSearchIf {
 public:
  virtual ~MTSearchNull() {}
  void MTSearchDeal(SearchMultiRes& /* _return */, const SearchQueryReq& /* query */) {
    return;
  }
  void MTSearchPoi(SearchMultiRes& /* _return */, const SearchQueryReq& /* query */) {
    return;
  }
  void MTMultiSearch(SearchMultiRes& /* _return */, const SearchQueryReq& /* query */) {
    return;
  }
  void AttributeFilter(SearchMultiRes& /* _return */, const SearchQueryReq& /* query */) {
    return;
  }
};

typedef struct _MTSearch_MTSearchDeal_args__isset {
  _MTSearch_MTSearchDeal_args__isset() : query(false) {}
  bool query :1;
} _MTSearch_MTSearchDeal_args__isset;

class MTSearch_MTSearchDeal_args {
 public:

  MTSearch_MTSearchDeal_args(const MTSearch_MTSearchDeal_args&);
  MTSearch_MTSearchDeal_args(MTSearch_MTSearchDeal_args&&);
  MTSearch_MTSearchDeal_args& operator=(const MTSearch_MTSearchDeal_args&);
  MTSearch_MTSearchDeal_args& operator=(MTSearch_MTSearchDeal_args&&);
  MTSearch_MTSearchDeal_args() {
  }

  virtual ~MTSearch_MTSearchDeal_args() throw();
  SearchQueryReq query;

  _MTSearch_MTSearchDeal_args__isset __isset;

  void __set_query(const SearchQueryReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MTSearch_MTSearchDeal_pargs {
 public:


  virtual ~MTSearch_MTSearchDeal_pargs() throw();
  const SearchQueryReq* query;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MTSearch_MTSearchDeal_result__isset {
  _MTSearch_MTSearchDeal_result__isset() : success(false) {}
  bool success :1;
} _MTSearch_MTSearchDeal_result__isset;

class MTSearch_MTSearchDeal_result {
 public:

  MTSearch_MTSearchDeal_result(const MTSearch_MTSearchDeal_result&);
  MTSearch_MTSearchDeal_result(MTSearch_MTSearchDeal_result&&);
  MTSearch_MTSearchDeal_result& operator=(const MTSearch_MTSearchDeal_result&);
  MTSearch_MTSearchDeal_result& operator=(MTSearch_MTSearchDeal_result&&);
  MTSearch_MTSearchDeal_result() {
  }

  virtual ~MTSearch_MTSearchDeal_result() throw();
  SearchMultiRes success;

  _MTSearch_MTSearchDeal_result__isset __isset;

  void __set_success(const SearchMultiRes& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MTSearch_MTSearchDeal_presult__isset {
  _MTSearch_MTSearchDeal_presult__isset() : success(false) {}
  bool success :1;
} _MTSearch_MTSearchDeal_presult__isset;

class MTSearch_MTSearchDeal_presult {
 public:


  virtual ~MTSearch_MTSearchDeal_presult() throw();
  SearchMultiRes* success;

  _MTSearch_MTSearchDeal_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _MTSearch_MTSearchPoi_args__isset {
  _MTSearch_MTSearchPoi_args__isset() : query(false) {}
  bool query :1;
} _MTSearch_MTSearchPoi_args__isset;

class MTSearch_MTSearchPoi_args {
 public:

  MTSearch_MTSearchPoi_args(const MTSearch_MTSearchPoi_args&);
  MTSearch_MTSearchPoi_args(MTSearch_MTSearchPoi_args&&);
  MTSearch_MTSearchPoi_args& operator=(const MTSearch_MTSearchPoi_args&);
  MTSearch_MTSearchPoi_args& operator=(MTSearch_MTSearchPoi_args&&);
  MTSearch_MTSearchPoi_args() {
  }

  virtual ~MTSearch_MTSearchPoi_args() throw();
  SearchQueryReq query;

  _MTSearch_MTSearchPoi_args__isset __isset;

  void __set_query(const SearchQueryReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MTSearch_MTSearchPoi_pargs {
 public:


  virtual ~MTSearch_MTSearchPoi_pargs() throw();
  const SearchQueryReq* query;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MTSearch_MTSearchPoi_result__isset {
  _MTSearch_MTSearchPoi_result__isset() : success(false) {}
  bool success :1;
} _MTSearch_MTSearchPoi_result__isset;

class MTSearch_MTSearchPoi_result {
 public:

  MTSearch_MTSearchPoi_result(const MTSearch_MTSearchPoi_result&);
  MTSearch_MTSearchPoi_result(MTSearch_MTSearchPoi_result&&);
  MTSearch_MTSearchPoi_result& operator=(const MTSearch_MTSearchPoi_result&);
  MTSearch_MTSearchPoi_result& operator=(MTSearch_MTSearchPoi_result&&);
  MTSearch_MTSearchPoi_result() {
  }

  virtual ~MTSearch_MTSearchPoi_result() throw();
  SearchMultiRes success;

  _MTSearch_MTSearchPoi_result__isset __isset;

  void __set_success(const SearchMultiRes& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MTSearch_MTSearchPoi_presult__isset {
  _MTSearch_MTSearchPoi_presult__isset() : success(false) {}
  bool success :1;
} _MTSearch_MTSearchPoi_presult__isset;

class MTSearch_MTSearchPoi_presult {
 public:


  virtual ~MTSearch_MTSearchPoi_presult() throw();
  SearchMultiRes* success;

  _MTSearch_MTSearchPoi_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _MTSearch_MTMultiSearch_args__isset {
  _MTSearch_MTMultiSearch_args__isset() : query(false) {}
  bool query :1;
} _MTSearch_MTMultiSearch_args__isset;

class MTSearch_MTMultiSearch_args {
 public:

  MTSearch_MTMultiSearch_args(const MTSearch_MTMultiSearch_args&);
  MTSearch_MTMultiSearch_args(MTSearch_MTMultiSearch_args&&);
  MTSearch_MTMultiSearch_args& operator=(const MTSearch_MTMultiSearch_args&);
  MTSearch_MTMultiSearch_args& operator=(MTSearch_MTMultiSearch_args&&);
  MTSearch_MTMultiSearch_args() {
  }

  virtual ~MTSearch_MTMultiSearch_args() throw();
  SearchQueryReq query;

  _MTSearch_MTMultiSearch_args__isset __isset;

  void __set_query(const SearchQueryReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MTSearch_MTMultiSearch_pargs {
 public:


  virtual ~MTSearch_MTMultiSearch_pargs() throw();
  const SearchQueryReq* query;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MTSearch_MTMultiSearch_result__isset {
  _MTSearch_MTMultiSearch_result__isset() : success(false) {}
  bool success :1;
} _MTSearch_MTMultiSearch_result__isset;

class MTSearch_MTMultiSearch_result {
 public:

  MTSearch_MTMultiSearch_result(const MTSearch_MTMultiSearch_result&);
  MTSearch_MTMultiSearch_result(MTSearch_MTMultiSearch_result&&);
  MTSearch_MTMultiSearch_result& operator=(const MTSearch_MTMultiSearch_result&);
  MTSearch_MTMultiSearch_result& operator=(MTSearch_MTMultiSearch_result&&);
  MTSearch_MTMultiSearch_result() {
  }

  virtual ~MTSearch_MTMultiSearch_result() throw();
  SearchMultiRes success;

  _MTSearch_MTMultiSearch_result__isset __isset;

  void __set_success(const SearchMultiRes& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MTSearch_MTMultiSearch_presult__isset {
  _MTSearch_MTMultiSearch_presult__isset() : success(false) {}
  bool success :1;
} _MTSearch_MTMultiSearch_presult__isset;

class MTSearch_MTMultiSearch_presult {
 public:


  virtual ~MTSearch_MTMultiSearch_presult() throw();
  SearchMultiRes* success;

  _MTSearch_MTMultiSearch_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _MTSearch_AttributeFilter_args__isset {
  _MTSearch_AttributeFilter_args__isset() : query(false) {}
  bool query :1;
} _MTSearch_AttributeFilter_args__isset;

class MTSearch_AttributeFilter_args {
 public:

  MTSearch_AttributeFilter_args(const MTSearch_AttributeFilter_args&);
  MTSearch_AttributeFilter_args(MTSearch_AttributeFilter_args&&);
  MTSearch_AttributeFilter_args& operator=(const MTSearch_AttributeFilter_args&);
  MTSearch_AttributeFilter_args& operator=(MTSearch_AttributeFilter_args&&);
  MTSearch_AttributeFilter_args() {
  }

  virtual ~MTSearch_AttributeFilter_args() throw();
  SearchQueryReq query;

  _MTSearch_AttributeFilter_args__isset __isset;

  void __set_query(const SearchQueryReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MTSearch_AttributeFilter_pargs {
 public:


  virtual ~MTSearch_AttributeFilter_pargs() throw();
  const SearchQueryReq* query;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MTSearch_AttributeFilter_result__isset {
  _MTSearch_AttributeFilter_result__isset() : success(false) {}
  bool success :1;
} _MTSearch_AttributeFilter_result__isset;

class MTSearch_AttributeFilter_result {
 public:

  MTSearch_AttributeFilter_result(const MTSearch_AttributeFilter_result&);
  MTSearch_AttributeFilter_result(MTSearch_AttributeFilter_result&&);
  MTSearch_AttributeFilter_result& operator=(const MTSearch_AttributeFilter_result&);
  MTSearch_AttributeFilter_result& operator=(MTSearch_AttributeFilter_result&&);
  MTSearch_AttributeFilter_result() {
  }

  virtual ~MTSearch_AttributeFilter_result() throw();
  SearchMultiRes success;

  _MTSearch_AttributeFilter_result__isset __isset;

  void __set_success(const SearchMultiRes& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MTSearch_AttributeFilter_presult__isset {
  _MTSearch_AttributeFilter_presult__isset() : success(false) {}
  bool success :1;
} _MTSearch_AttributeFilter_presult__isset;

class MTSearch_AttributeFilter_presult {
 public:


  virtual ~MTSearch_AttributeFilter_presult() throw();
  SearchMultiRes* success;

  _MTSearch_AttributeFilter_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class MTSearchClientT : virtual public MTSearchIf {
 public:
  MTSearchClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  MTSearchClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void MTSearchDeal(SearchMultiRes& _return, const SearchQueryReq& query);
  void send_MTSearchDeal(const SearchQueryReq& query);
  void recv_MTSearchDeal(SearchMultiRes& _return);
  void MTSearchPoi(SearchMultiRes& _return, const SearchQueryReq& query);
  void send_MTSearchPoi(const SearchQueryReq& query);
  void recv_MTSearchPoi(SearchMultiRes& _return);
  void MTMultiSearch(SearchMultiRes& _return, const SearchQueryReq& query);
  void send_MTMultiSearch(const SearchQueryReq& query);
  void recv_MTMultiSearch(SearchMultiRes& _return);
  void AttributeFilter(SearchMultiRes& _return, const SearchQueryReq& query);
  void send_AttributeFilter(const SearchQueryReq& query);
  void recv_AttributeFilter(SearchMultiRes& _return);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef MTSearchClientT< ::apache::thrift::protocol::TProtocol> MTSearchClient;

template <class Protocol_>
class MTSearchProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  boost::shared_ptr<MTSearchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MTSearchProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (MTSearchProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_MTSearchDeal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MTSearchDeal(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_MTSearchPoi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MTSearchPoi(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_MTMultiSearch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MTMultiSearch(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_AttributeFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AttributeFilter(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  MTSearchProcessorT(boost::shared_ptr<MTSearchIf> iface) :
    iface_(iface) {
    processMap_["MTSearchDeal"] = ProcessFunctions(
      &MTSearchProcessorT::process_MTSearchDeal,
      &MTSearchProcessorT::process_MTSearchDeal);
    processMap_["MTSearchPoi"] = ProcessFunctions(
      &MTSearchProcessorT::process_MTSearchPoi,
      &MTSearchProcessorT::process_MTSearchPoi);
    processMap_["MTMultiSearch"] = ProcessFunctions(
      &MTSearchProcessorT::process_MTMultiSearch,
      &MTSearchProcessorT::process_MTMultiSearch);
    processMap_["AttributeFilter"] = ProcessFunctions(
      &MTSearchProcessorT::process_AttributeFilter,
      &MTSearchProcessorT::process_AttributeFilter);
  }

  virtual ~MTSearchProcessorT() {}
};

typedef MTSearchProcessorT< ::apache::thrift::protocol::TDummyProtocol > MTSearchProcessor;

template <class Protocol_>
class MTSearchProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  MTSearchProcessorFactoryT(const ::boost::shared_ptr< MTSearchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MTSearchIfFactory > handlerFactory_;
};

typedef MTSearchProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > MTSearchProcessorFactory;

class MTSearchMultiface : virtual public MTSearchIf {
 public:
  MTSearchMultiface(std::vector<boost::shared_ptr<MTSearchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MTSearchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MTSearchIf> > ifaces_;
  MTSearchMultiface() {}
  void add(boost::shared_ptr<MTSearchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void MTSearchDeal(SearchMultiRes& _return, const SearchQueryReq& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MTSearchDeal(_return, query);
    }
    ifaces_[i]->MTSearchDeal(_return, query);
    return;
  }

  void MTSearchPoi(SearchMultiRes& _return, const SearchQueryReq& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MTSearchPoi(_return, query);
    }
    ifaces_[i]->MTSearchPoi(_return, query);
    return;
  }

  void MTMultiSearch(SearchMultiRes& _return, const SearchQueryReq& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MTMultiSearch(_return, query);
    }
    ifaces_[i]->MTMultiSearch(_return, query);
    return;
  }

  void AttributeFilter(SearchMultiRes& _return, const SearchQueryReq& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AttributeFilter(_return, query);
    }
    ifaces_[i]->AttributeFilter(_return, query);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class MTSearchConcurrentClientT : virtual public MTSearchIf {
 public:
  MTSearchConcurrentClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  MTSearchConcurrentClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void MTSearchDeal(SearchMultiRes& _return, const SearchQueryReq& query);
  int32_t send_MTSearchDeal(const SearchQueryReq& query);
  void recv_MTSearchDeal(SearchMultiRes& _return, const int32_t seqid);
  void MTSearchPoi(SearchMultiRes& _return, const SearchQueryReq& query);
  int32_t send_MTSearchPoi(const SearchQueryReq& query);
  void recv_MTSearchPoi(SearchMultiRes& _return, const int32_t seqid);
  void MTMultiSearch(SearchMultiRes& _return, const SearchQueryReq& query);
  int32_t send_MTMultiSearch(const SearchQueryReq& query);
  void recv_MTMultiSearch(SearchMultiRes& _return, const int32_t seqid);
  void AttributeFilter(SearchMultiRes& _return, const SearchQueryReq& query);
  int32_t send_AttributeFilter(const SearchQueryReq& query);
  void recv_AttributeFilter(SearchMultiRes& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef MTSearchConcurrentClientT< ::apache::thrift::protocol::TProtocol> MTSearchConcurrentClient;

#ifdef _WIN32
  #pragma warning( pop )
#endif



#include "MTSearch.tcc"
#include "MTSearchApi_types.tcc"

#endif
